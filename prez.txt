Wstep
redundantny system plikow wykorzystujac FUSE (Filesystem in Userpsace), modul ktory pozwala na implementacje systemu plikow w przestrzeni uzytkownika. Modul fuse stanowi "most" miedzy kodem in userspace, a interfejsem w kernelu.
FUSE przyu tworzeniu vfs pozwala skupic sie na docelowej funkcjonalnosci.

Rozwiazania
RAID-like system. 
Repliki mozna ustawic na jednym, jak i wielu dyskach. Na start sprawdzana jest predkosc kazdej repliki, ustawiajac jej priorytet. Dane sa sciagane z replik o najwyzszym priorytecie.
Opcja1: Czytaj z najwyzszego priorytetu i ewentualnie napraw. Jesli sie nie da, idz do nastepnego.
Opcja2: Czytaj z najwyzszego priorytetu i ewentualnie napraw. Przejedz przez wszystkie repliki czy nie wymagana jest naprawa
Repliki: calkowite kopie plikow | kopie kolejnych sektorow ( pod jednym vfs lub pod kilkoma, np. gdyby kazdy vfs byl pod innym dyskiem, w drugim przypadku nie utracimy wszystkich danych w razie jakby dysk nawalil) | CRC + checksum?
Warstwowe dzialanie? replika | kopie sektorow | checksum jako nakladki na poprzednie systemy plikow

Opis
RAID (Redundant Array of Independent Disks)
RAID-0: (Striping) Dane dzielone na mniejsze segmenty i zapisywane na kazdym dysku z danej grupy dyskow (repliki)
RAID-1: Lustrzane odbicie, n/2 miejsca. Zapisuje calkowite duplikaty danych.
    Odporne na utrate n-1 dyskow
    Duzy koszt miejsca
RAID-2: Zapisywanie po 1 bicie na kolejnych dyskach, kod hamminga. Dowolny dysk moze zostac odtworzony przez pozostale
RAID-3: Zapisywanie po 8 bitow na kolejnych dyskach, sumy kontrolne. Dziala jak R0, ale wystepuje jeszcze dodatkowy dysk ktory zapisuje kody parzystosci.
RAID-4: Podobnie do R3, ale dane dzielone na bloki. Striping. Blok parzystosci zapisywany na dedykowanym dysku.
RAID-5: A'la R4, co najmniej 3 dyski. Rozlozenie danych na wszystkich dyskach, 1/4 danych rezerwowana na dane korekcji bledow, wiec 3/4 pojemnosci przechowuje dane.
RAID-6: Podwojna parzystosc, ratuje awarie dwoch dyskow

RAID-0+1: RAID-1, ktorego elementami sa macierze RAID-0. Pojedyncza awaria dysku -> RAID-0
RAID-1+0: RAID 0, ktorego elementami sa macierze RAID-1.

Problemy
Wirtualne systemy plikow nie przechowuja danych, tylko przetwarzaja juz istniejace dane. 
Przy montowaniu systemu, czy repliki juz musza istniec? 
Czy zostana stworzone na podstawie danych w mountpoint?  
Czy na poczatku sprawdzamy rozjechanie replik?

Forward error correction dla raid



--- IMPLEMENTACJA ---
Config:
 - 
 - 

Systemy:
RAID0-like - Jedynie podstawowa funkcjonalnosc, tj. read, write, open, close
RAID1-like - Pelna funkcjonalnosc
RAID2,3-like - kody korekcyjne, podstawowa funkcjonalnosc systemu plikow
RAID4,5-like - na podstawie R0, podstawowwa funkcjonalnosc systemu plikow
+ wariacje

Gniazdo kontrolne:
 - Symulacja

Możliwe uszkodzenia danych:
 - Bitrot
 - Burst errors
 - Błąd zapisu/odczytu, uszkodzone metadane/nagłówek pliku
 - Uszkodzony dysk, brakujące pliki w podsystemie

Detekcja błędów:
 - Sumy kontrolne jako metadane pliku?
 - Bloki parzystości (stricte raid4,5,6)
 - 

Kody korekcyjne:
 - Blokowe; Reed-Solomon, Hamming

Pozostale algorytmy:
 - Round-robin

Szczegoly:
 - Priorytety replik
 - Statusy replik {clean, dirty}?

